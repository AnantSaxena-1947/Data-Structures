// All pair shortes path Algorith
// find if there is a negative cycle or not
// Time Complexity
// There are three loops. Each loop has constant complexities. So, the time complexity of the Floyd-Warshall algorithm is O(n3).

// Space Complexity
// The space complexity of the Floyd-Warshall algorithm is O(n2).

class Solution {
  public:
	void shortest_distance(vector<vector<int>>&matrix){
	    
	    int n = matrix.size();
	    
	    for(int i = 0;i<n;i++){
	        for(int j= 0;j<n;j++){
	            if(matrix[i][j] == -1){
	                matrix[i][j] = INT_MAX;
	            }
	        }
	    }
	    
	    for(int via = 0;via<n; via++){
	        for(int i = 0;i<n;i++){
	            for(int j = 0;j<n;j++){
	                if(matrix[i][via] != INT_MAX && matrix[via][j] != INT_MAX){
	                    matrix[i][j] = min(matrix[i][j], matrix[i][via] + matrix[via][j]);
	                }
	            }
	        }
	    }
	    
	   // ****To check if there is a negative cycle or not****
	    
	   //for(int i= 0;i<n;i++){
	   //    if(matrix[i][j] < 0){
	   //        cout<<"Negative cycle present"<<endl;
	   //    }
	   //}
	    
	    for(int i = 0;i<n;i++){
	        for(int j= 0;j<n;j++){
	            if(matrix[i][j] == INT_MAX){
	                matrix[i][j] = -1;
	            }
	        }
	    }
	}
};
